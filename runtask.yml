name: checkmodulemd
namespace: dist
desc: download modulemd and run validity checks upon it
maintainer: merlinm

input:
    args:
        - dist_git_commit

environment:
    rpm:
        - pdc-client
        - python2-aexpect
        - python2-modulemd
        - python2-requests
        - python2-enchant
        - hunspell-en-US

actions:
    - name: install avocado from updates-testing
      shell:
        - >-
          dnf install -y --enablerepo=updates-testing
          python2-avocado python2-avocado-plugins-varianter-yaml-to-mux

    # NOTE: temporary until the package is in Fedora proper
    - name: install modularity-testing-framework
      shell:
        - dnf copr -y enable phracek/modularity-testing-framework
        - dnf install --best -y modularity-testing-framework

    - name: split the given commit identifier into useful pieces
      python:
        file: split_string.py
        callable: run
        string: ${dist_git_commit}
      export: c

    - name: download the modulemd file
      distgit:
        package: ${c.name}
        gitref: ${c.gitref}
        # This will always be modules/ ...
        namespace: ${c.namespace}
        baseurl: https://src.fedoraproject.org
        path:
          - ${c.name}.yaml
        localpath:
          - download/${c.name}.yaml

    - name: run avocado modulemd validity test
      shell:
      - ignorereturn:
        - [
            avocado, run, check_modulemd.py,
            --job-results-dir, "${workdir}",
            --mux-inject,
            'run:modulemd:${workdir}/download/${c.name}.yaml',
        ]

    - name: process avocado run output, for resultsdb
      python:
          file: process_avocado_results.py
          callable: run
          item: ${dist_git_commit}
          item_type: dist_git_commit
          checkname: modulemd
          workdir: ${workdir}
          artifactsdir: ${artifactsdir}
      export: output

    - name: report results to resultsdb
      resultsdb:
          results: ${output}
